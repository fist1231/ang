1.Create new:
============

git init
git add .
git commit -m "Message"

git remote add origin remote/path/to/repositoryL
# Sets the new remote
git remote -v
# Verifies the new remote URL

git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origi


2. Update from:
===============

git pull


if new packages were added to package.json, do:
npm init
npm run dev



3. Commit and push to:
======================

status:
git status

add/deleted:
git add -A

only changes:
git commit -m "Message"

push to remote:
git push origin master


4. Get first time from remote:
==============================

git clone remoteUrl localDir
git clone username@host:/path/to/repository

5. Override local changes from remote:
======================================

git checkout -- <filename>
this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.

git fetch origin
git reset --hard origin/master
to drop all local changes and commits, fetch the latest history from the server and point local master branch at it.


Exclude from commit:
===================
For a File

git add -u
git reset -- main/dontcheckmein.txt
For a folder

git add -u
git reset -- main/*


Permanently authenticating with Git repositories
================================================

Run following command to enable credential caching:

$ git config credential.helper store
$ git push https://github.com/repo.git

=================================================
git branch	- list branches
git checkout branch/master	- switch branches

=== if changes in the wrong branch:
1. git stash
2. git checkout correct-branch
3. git stash pop

git stash list	- check stashes

git stash list [<options>]
git stash show [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
	     [-u|--include-untracked] [-a|--all] [-m|--message <message>]]
	     [--] [<pathspec>]]
git stash clear
git stash create [<message>]
git stash store [-m|--message <message>] [-q|--quiet] <commit>


==============================================================
merge branches:

(on branch development)$ git merge master
(resolve any merge conflicts if there are any)
git checkout master
git merge development (there won't be any conflicts now)

git add -A
git commit -m "message"
git push origin master


=================================================================
Workflow:

1. Start working on a new feature
## clone repo
git clone
## create branch
git branch new_branch
## switch to branch
git checkout new_branch

2. Commit changes
## Start working
## done working
## stage and commit
git add -A
git commit -m "message"

3. Merge new feature branch to local master
%%%% (extra) %%%%
## if commit history is dirty, rebase interactively to squash redundant commits before merging
git rebase -i master

~~ text editor:
~~~~~~~~~~~~~~~~~~~~~~
pick 681bd1c Commit #1
squash eabac68 Commit #2 to be squashed
~~~~~~~~~~~~~~~~~~~~~~
%%%% (end extra) %%%%%

## merge with local master
git checkout master
git merge new_branch
## delete branch when done
git branch -d new_branch

4. Publishing to origin central repo
git fetch origin
## see what's changed (add --stat to see files)
git log master..origin/maser --stat   // {what's new in origin/master} 
git log origin/master..master         // {what's new in master}

## if there are changes in remote master, rebase. Else - push yours:
git rebase origin/master

## push local changes to central repo
git push origin master

=========== End Workflow ================================


Remote branches.

To even see remote branches, fetch origin (or any from git remote -v):
git fetch origin

Now can list remote branches:
git branch -r


1. to just get the branch with detached head without permanently tracking it:
git checkout central/branch

2. to permanently checkout and track it:
git checkout central/branch --track

3. delete remote branch:
git push origin --delete remote_branch

